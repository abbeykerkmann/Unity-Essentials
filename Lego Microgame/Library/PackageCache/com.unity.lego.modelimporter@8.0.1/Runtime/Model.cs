// Copyright (C) LEGO System A/S - All Rights Reserved
// Unauthorized copying of this file, via any medium is strictly prohibited

using System;
using UnityEngine;
#if UNITY_EDITOR
using UnityEditor;
#endif

namespace LEGOModelImporter
{
    /// <summary>
    /// Represents a LEGO model that can contain multiple model groups
    /// </summary>
#if UNITY_EDITOR
    [ExecuteInEditMode]
#endif
    public class Model : MonoBehaviour
    {
        /// <summary>
        /// Options for the pivot of the model
        /// </summary>
        public enum Pivot
        {
            /// <summary>
            /// Original pivot is kept on import and recomputation
            /// </summary>
            Original,

            /// <summary>
            /// Pivot is recomputed to the center of the bricks in the model
            /// </summary>
            Center,

            /// <summary>
            /// Pivot is recomputed to the bottom center of the bricks in the model
            /// </summary>
            BottomCenter
        };

        /// <summary>
        /// The absolute file path of the source file
        /// </summary>
        public string absoluteFilePath;

        /// <summary>
        /// The relative file path of the source file
        /// </summary>
        public string relativeFilePath;

        /// <summary>
        /// The pivot option that has been set for this model
        /// </summary>
        public Pivot pivot;

        /// <summary>
        /// Whether or not this model is auto generated
        /// </summary>
        /// <remarks>
        /// Auto generated models have some limitations such as not being able to be reimported.
        /// Models are usually only generated if you have turned on auto update hierarchy in the editor
        /// </remarks>
        public bool autoGenerated;

        /// <summary>
        /// The import settings of the model
        /// </summary>
        public DictionaryIntToModelGroupImportSettings importSettings;

#if UNITY_EDITOR
        /// <summary>
        /// Event that is raised if the children of the transform change
        /// </summary>
        internal static event Action<Model> onChildrenChange;

        void OnTransformChildrenChanged()
        {
            onChildrenChange?.Invoke(this);
        }
#endif
    }
}